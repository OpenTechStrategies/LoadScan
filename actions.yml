---
included-configs:
- secrets.yml

scenarios:
  get-cookies:
    # Get "testing" cookie and csrf for subsequent requests. This scenario should always be first in any execution plan.
    requests:
    - url: ${APP_URL}/api/auth/loggedIn
      headers:
        content-type: application/json
      method: POST
      label: loggedin
      body: '{"RequestVO":{"data":[{}],"apiKey":"${API_KEY}","csrf":null},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true
      extract-jsonpath:
        csrf:
          jsonpath: $.csrf

  get-share-link:
    # Try to get the share link for a file before it's created, and confirm it doesn't exist.
    requests:
    - url: ${APP_URL}/api/share/getLink
      headers:
        content-type: application/json
      method: POST
      label: get-share-link
      body: '{"RequestVO":{"data":[{"RecordVO":{"folder_linkId":${linkId}}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.Results[0].message[0]"
        expected-value: "Link does not exist"
        validate: true
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true

  get-account:
    # Get csrf for subsequent requests.
    requests:
    - url: ${APP_URL}/api/account/get
      headers:
        content-type: application/json
      method: POST
      label: get-account
      body: '{"RequestVO":{"data":[{"AccountVO":{}}],"apiKey":"${API_KEY}","csrf":null},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true

  create-account:
    # Create a perfbot user account.
    requests:
    - set-variables:
        email: perfbot+taurus${__RandomString(8,1234567890)}@opentechstrategies.com
        password: ${__RandomString(12, abcdegfhijklmnopqrstuvwxyz1234567890)}
    - url: ${APP_URL}/api/account/post
      headers:
        content-type: application/json
      method: POST
      label: create-user-account
      body: '{"RequestVO":{"data":[{"AccountVO":{"primaryEmail":"${email}","fullName":"${email}","agreed":true,"optIn":false},"AccountPasswordVO":{"password":"${password}","passwordVerify":"${password}"}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true

  create-folder:
    # Create a folder in "My Files".
    requests:
    - set-variables:
        folderName: LoadTestFolder${__RandomString(8,1234567890)}
    - url: ${APP_URL}/api/folder/post
      headers:
        content-type: application/json
      method: POST
      label: create-folder
      body: '{"RequestVO":{"data":[{"FolderVO":{"displayName":"${folderName}","parentFolderId":${parentFolderId},"parentFolder_linkId":${parentFolder_linkId}}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.Results[0].data[0].FolderVO.status"
        expected-value: "status.generic.ok"
        validate: true
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true
      extract-jsonpath:
        destFolder:
          jsonpath: $.Results[0].data[0].FolderVO

  create-tag:
    # Create a tag
    requests:
    - url: ${APP_URL}/api/tag/post
      headers:
        content-type: application/json
      method: POST
      label: create-tag
      body: '{"RequestVO":{"data":[{"TagVO":{"name":"MyBlazemeterTag"}, "TagLinkVO":{"refTable":"record","refId":68}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.Results[0].data[0].TagLinkVO.status"
        expected-value: "status.generic.ok"
        validate: true
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true
      extract-jsonpath:
        tagId:
          jsonpath: $.Results[0].data[0].TagLinkVO.tagId
        tagLinkId:
          jsonpath: $.Results[0].data[0].TagLinkVO.tag_linkId

  logout:
    # Logout of the application.
    requests:
    - url: ${APP_URL}/api/auth/logout
      headers:
        content-type: application/json
      method: POST
      label: logout
      body: '{"RequestVO":{"data":[{}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true

  login:
    # Login with ${email}:${password}. This variables are set by create-account or login-preexisting.
    requests:
    - url: ${APP_URL}/api/auth/login
      headers:
        content-type: application/json
      method: POST
      label: login
      body: '{"RequestVO":{"data":[{"AccountVO":{"primaryEmail":"${email}","rememberMe":false},"AccountPasswordVO":{"password":"${password}"}}],"apiKey":"${API_KEY}","csrf":null},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true
      extract-jsonpath:
        csrf:
          jsonpath: $.csrf

  login-preexisting:
    # Login with a pre-existing user account.
    data-sources:
    - path: accounts.csv
      variable-names: email,password
    requests:
    - include-scenario: login

  get-record:
    # Get record info.
    requests:
    - url: ${APP_URL}/api/record/get
      headers:
        content-type: application/json
      method: POST
      label: get-record
      body: '{"RequestVO":{"data":[{"RecordVO":{"archiveNbr":"${acrhiveNbr}","folder_linkId":${linkId},"recordId":${recordId}}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true
      extract-jsonpath:
        record:
          jsonpath: $.Results[0].data[0].RecordVO

  get-root-dir:
    # Get the directory info for the "My Files" folder.
    requests:
    - url: ${APP_URL}/api/folder/getroot
      headers:
        content-type: application/json
      method: POST
      label: getroot
      body: '{"RequestVO":{"data":[{}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true
      extract-jsonpath:
        parentFolderId:
          jsonpath: $.Results[0].data[0].FolderVO.ChildItemVOs[1].folderId
        parentFolder_linkId:
          jsonpath: $.Results[0].data[0].FolderVO.ChildItemVOs[1].FolderLinkVOs[0].folder_linkId

  get-tree:
    # Get record info.
    requests:
    - url: ${APP_URL}/api/folder/tree
      headers:
        content-type: application/json
      method: POST
      label: get-tree
      body: '{"RequestVO":{"data":[{"FolderVO":{"archiveNbr":"${acrhiveNbr}","folder_linkId":${parentFolder_linkId},"folderId":${parentFolderId}}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true

  copy-file:
    # Copy a file to a new folder.
    requests:
    - include-scenario: get-record
    - url: ${APP_URL}/api/record/copy
      headers:
        content-type: application/json
      method: POST
      label: copy-file
      body: '{"RequestVO":{"data":[{"RecordVO":${record},"FolderDestVO":${destFolder}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.Results[0].message[0]"
        expected-value: "Record copied"
        validate: true
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true

  move-file:
    # Move a file to a new folder.
    requests:
    - include-scenario: get-record
    - url: ${APP_URL}/api/record/move
      headers:
        content-type: application/json
      method: POST
      label: move-file
      body: '{"RequestVO":{"data":[{"RecordVO":${record},"FolderDestVO":${destFolder}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.Results[0].message[0]"
        expected-value: "Record moved to another folder"
        validate: true
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true

  share-file:
    # Generate a share link for a file.
    requests:
    - include-scenario: get-share-link
    - url: ${APP_URL}/api/share/generatesharelink
      headers:
        content-type: application/json
      method: POST
      label: share-file
      body: '{"RequestVO":{"data":[{"RecordVO":{"folder_linkId":${linkId}}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.Results[0].message[0]"
        expected-value: "Link generated"
        validate: true
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true
      extract-jsonpath:
        shareUrlToken:
          jsonpath: $.Results[0].data[0].Shareby_urlVO.urlToken

  upload-file:
    # Perform the file upload requests.
    keepalive: false
    data-sources:
    - files.csv
    requests:
    - url: ${APP_URL}/api/record/postmetabatch
      headers:
        content-type: application/json
      method: POST
      label: postmetabatch-request
      body: '{"RequestVO":{"data":[{"RecordVO":{"parentFolderId":${parentFolderId},"parentFolder_linkId":${parentFolder_linkId},"displayName":"${filename}","description":"","displayDT":"","displayEndDT":"","uploadFileName":"${filename}","thumbnail":"","LocnVO":{"locnId":null,"latitude":null,"longitude":null,"place":null,"placeVerified":null,"status":null,"type":null,"createdDT":null,"updatedDT":null},"derivedTimezoneId":null}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":300000}'
      extract-jsonpath:
        recordId:
          jsonpath: $.Results[0].data[0].RecordVO.recordId
        archiveNbr:
          jsonpath: $.Results[0].data[0].RecordVO.archiveNbr
        linkId:
          jsonpath: $.Results[0].data[0].RecordVO.folder_linkId
      assert-jsonpath:
      - jsonpath: "$.Results[0].message[0]"
        expected-value: "New records created"
        validate: true
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true

    - url: ${APP_URL}:9000/
      method: POST
      label: fileupload-request
      upload-files:
      - param: thefile
        # Ignore the warning that Taurus outputs about variables here. This does get expanded.
        path: ${filename}
      body:
        recordid: ${recordId}

  confirm-upload:
    # Poll /api/record/getLean at 2-second intervals to determine when the upload is complete.
    # Possible upload statuses:
    # - status.record.processing
    # - status.record.needs_converting
    # - status.record.converting
    # - status.generic.ok
    requests:
    # https://jmeter.apache.org/usermanual/component_reference.html#Transaction_Controller
    - transaction: Record processing
      force-parent-sample: true  # we don't need the reporting granuality of each request
      include-timers: true  # include pause interval in response time
      do:
      - while: '${__groovy(vars.get("uploadStatus") != "status.generic.ok" )}'
        do:
        - url: ${APP_URL}/api/record/getLean
          headers:
            content-type: application/json
          method: POST
          label: getLean
          body: '{"RequestVO":{"data":[{"RecordVO":{"archiveNbr":"${archiveNbr}"}}],"apiKey":"${API_KEY}","csrf":"${csrf}"},"timeout":{}}'
          assert-jsonpath:
          - jsonpath: "$.Results[0].data[0].RecordVO.recordId"
            expected-value: "${recordId}"
            validate: true
          - jsonpath: "$.isSuccessful"
            expected-value: "true"
            validate: true
          extract-jsonpath:
            uploadStatus:
              jsonpath: "$.Results[0].data[0].RecordVO.status"
        - action: pause
          target: current-thread
          pause-duration: 2s
    # Reset uploadStatus for subsequent samplers.
    - set-variables:
        uploadStatus: null

  check-share-link:
    # Confirm that a share link is able to be visited.
    requests:
    - url: ${APP_URL}/api/share/checkShareLink
      method: post
      label: check-share-link
      body: '{"RequestVO":{"data":[{"Shareby_urlVO":{"urlToken":"${shareUrlToken}"}}],"apiKey":"${API_KEY}","csrf":null},"timeout":{}}'
      assert-jsonpath:
      - jsonpath: "$.Results[0].data[0].Shareby_urlVO.status"
        expected-value: "status.generic.ok"
        validate: true
      - jsonpath: "$.isSuccessful"
        expected-value: "true"
        validate: true
